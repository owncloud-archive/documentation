Config.php Parameters
=====================
ownCloud uses the ``config/config.php`` file to control server operations.  
``config/config.sample.php`` lists all the configurable parameters within 
ownCloud. This document provides a more detailed reference. Many options are 
configurable on your Admin page, so it is usually not necessary to edit 
``config/config.php``.

Default Parameters
------------------
These parameters are configured by the ownCloud installer, and are required 
for your ownCloud server to operate. See the "Default config.php Examples" 
section (below) for examples of default configurations from clean, new 
installations.

'instanceid' => '',
  This is a unique identifier for your ownCloud installation, created    
  automatically by the installer.

'passwordsalt' => '',
  The salt used to hash all passwords, auto-generated by the ownCloud 
  installer. (There are also per-user salts.) If you lose this salt you lose 
  all your passwords.

'trusted_domains' => array(0 => 'domain', 1 =>'otherdomain'),
  Your list of trusted domains that users can log into. Specifying trusted 
  domains prevents host header poisoning. Do not remove this, as it performs 
  necessary security checks.
  
'datadirectory' => '',  
  Where user files are stored; this defaults to ``data/`` in the owncloud 
  directory. The SQLite database is also stored here, when you use SQLite.
  
'dbtype' => '',      
  Identifies the database used with this installation: ``sqlite``, ``mysql``, 
  ``pgsql``, ``oci``, or ``mssql``.
  
'version' => '',
  The current version number of your ownCloud installation.

'dbname' => '', 
  The name of the ownCloud database for your installation. The default name is 
  ``owncloud``, and you may give it any arbitrary name at installation when 
  your database is MySQL, MariaDB, or PostgreSQL.
  
'dbhost' => '',
  Your host server name, for example ``localhost``, ``hostname``, 
  ``hostname.example.com``, or the IP address. To specify a port use 
  ``hostname:####``; to specify a Unix socket use ``localhost:/path/to/socket``.

'dbtableprefix' => '',
  Prefix for the ownCloud tables in the database.
  
'dbuser' => '',            
  The user that ownCloud uses to write to the database. This must be unique 
  across ownCloud instances using the same SQL database. This is set up during 
  installation, so you shouldn't need to change it.
    
'dbpassword' => '',
  The password for the database user. This is set up during 
  installation, so you shouldn't need to change it.

'installed' => ,     
  Indicates whether the ownCloud instance was installed successfully; 
  ``true`` indicates a successful installation, and ``false`` indicates an 
  unsuccessful installation.
    
Default config.php Examples
---------------------------
When you use SQLite as your ownCloud database, your ``config.php`` looks like 
this after installation. The SQLite database is stored in your ownCloud 
``data/`` directory. SQLite is a simple, lightweight embedded database that 
is good for testing and for simple installations, but for production ownCloud 
systems you should use MySQL, MariaDB, or PosgreSQL.

::

  <?php
  $CONFIG = array (
    'instanceid' => 'occ6f7365735',
    'passwordsalt' => '2c5778476346786306303',
    'trusted_domains' => 
    array (
      0 => 'localhost',
      1 => 'studio',
    ),
    'datadirectory' => '/var/www/owncloud/data',
    'dbtype' => 'sqlite3',
    'version' => '7.0.2.1',
    'installed' => true,
  );

This example is from a new ownCloud installation using MariaDB::


  <?php
  $CONFIG = array (
    'instanceid' => 'oc8c0fd71e03',
    'passwordsalt' => '515a13302a6b3950a9d0fdb970191a',
    'trusted_domains' => 
    array (
      0 => 'localhost',
      1 => 'studio',
      2 => '192.168.10.155'
    ),
    'datadirectory' => '/var/www/owncloud/data',
    'dbtype' => 'mysql',
     'version' => '7.0.2.1',
    'dbname' => 'owncloud',
    'dbhost' => 'localhost',
    'dbtableprefix' => 'oc_',
    'dbuser' => 'oc_carla',
    'dbpassword' => '67336bcdf7630dd80b2b81a413d07',
    'installed' => true,
  );

User Experience
---------------
These optional parameters control some aspects of the user interface. Default 
values, where present, are shown.

'default_language' => 'en',  
  This sets the default language on your ownCloud server, using ISO_639-1 
  language codes such as ``en`` for English, ``de`` for German, and ``fr`` 
  for French. It overrides automatic language detection on public pages like 
  login or shared items. User's language preferences configured under 
  "personal -> language" override this setting after they have logged in.
  
'defaultapp' => 'files',
  Set the default app to open on login. Use the app names as they appear in 
  the Apps menu, such as Document, Calendar, and Pictures. You can use a 
  comma-separated list of app names, so if the first app is not enabled for a 
  user then ownCloud will try the second one, and so on. If no enabled apps 
  are found it defaults to the Files app.
  
'knowledgebaseenabled' => true,
  ``true`` enables the Help menu item in the user menu (top left of the 
  ownCloud Web interface). ``false`` removes the Help item.
  
'enable_avatars' => true,
  ``true`` enables avatars, or user profile photos. These appear on the User 
  page and on user's Personal pages. ``false`` disables them.
  
'allow_user_to_change_display_name' => true,
  ``true`` allows users to change their display names (on their Personal 
  pages), and ``false`` prevents them from changing their display names.

'remember_login_cookie_lifetime' => 60*60*24*15,
  Lifetime of the remember login cookie, which is set when the user 
  clicks the ``remember`` checkbox on the login screen. The default is 15 
  days, expressed in seconds.

'session_lifetime' => 60*60*24,
  The lifetime of a session after inactivity; the default is 24 hours, 
  expressed in seconds.
  
'session_keepalive' => true,
  Enable or disable session keep-alive when a user is logged in to the Web 
  UI. Enabling this sends a "heartbeat" to the server to keep it from timing 
  out.

'skeletondirectory' => '',
  The directory where the skeleton files are located. These files will be 
  copied to the data directory of new users. Leave empty to not copy any 
  skeleton files.

The ``user_backends`` app allows you to configure alternate authentication 
backends. Supported backends are IMAP (OC_User_IMAP), SMB (OC_User_SMB), and 
FTP (OC_User_FTP).

::
  
 'user_backends'=>array(
	array(
		'class'=>'OC_User_IMAP',
		'arguments'=>array('{imap.gmail.com:993/imap/ssl}INBOX')
	)
 ),
  
  
Mail Parameters
---------------
These configure the email settings for ownCloud notifications and password 
resets.

'mail_domain' => ,
  The return address that you want to appear on emails sent by the ownCloud 
  server, for example ``oc-admin@example.com``, substituting your own domain, 
  of course.

'mail_from_address' => '',
  FROM address that overrides the built-in ``sharing-noreply`` and 
  ``lostpassword-noreply`` FROM addresses.

'mail_smtpdebug' => false,
  Enable SMTP class debugging.
 
'mail_smtpmode' => 'sendmail',
  Which mode to use for sending mail: ``sendmail``, ``smtp``, ``qmail`` or 
  ``php``.
  
  If you are using local or remote SMTP, set this to ``smtp``.
  
  If you are using PHP mail you must have an installed and working email system 
  on the server. The program used to send email is defined in the ``php.ini`` 
  file.

  For the ``sendmail`` option you need an installed and working email system on 
  the server, with ``/usr/sbin/sendmail`` installed on your Unix system.

  For ``qmail`` the binary is /var/qmail/bin/sendmail, and it must be  
  installed on your Unix system.

'mail_smtphost' => '127.0.0.1',
  This depends on ``mail_smtpmode``. Specified the IP address of your mail 
  server host. This may contain multiple hosts separated by a semi-colon. If 
  you need to specify the port number append it to the IP address separated 
  by a colon, like this: ``127.0.0.1:24``.

'mail_smtpport' => 25,
  This depends on ``mail_smtpmode``. Specify the port for sending mail.

'mail_smtptimeout' => 10,
  This depends on ``mail_smtpmode``. This set an SMTP server timeout, in 
  seconds. You may need to increase this if you are running an anti-malware 
  or spam scanner.

'mail_smtpsecure' => '',
  This depends on ``mail_smtpmode``. Specify when you are using ``ssl`` or 
  ``tls``, or leave empty for no encryption.

'mail_smtpauth' => false,
  This depends on ``mail_smtpmode``. Change this to ``true`` if your mail 
  server requires authentication. 

'mail_smtpauthtype' => 'LOGIN',
  This depends on ``mail_smtpmode``. If SMTP authentication is required, choose 
  the authentication type as ``LOGIN`` (default) or ``PLAIN``.

'mail_smtpname' => '',
  This depends on ``mail_smtpauth``. Specify the username for authenticating to 
  the SMTP server.

'mail_smtppassword' => '',
  This depends on ``mail_smtpauth``. Specify the password for authenticating to 
  the SMTP server.
  
Proxy Configurations
--------------------
'overwritehost' => '',
  The automatic hostname detection of ownCloud can fail in certain reverse 
  proxy and CLI/cron situations. This option allows you to manually override 
  the automatic detection; for example ``www.example.com``, or specify the 
  port ``www.example.com:8080``.
  
'overwriteprotocol' => '',
  When generating URLs, ownCloud attempts to detect whether the server is 
  accessed via ``https`` or ``http``. However, if ownCloud is behind a proxy 
  and the proxy handles the ``https`` calls, ownCloud would not know that 
  ``ssl`` is in use, which would result in incorrect URLs being generated. 
  Valid values   are ``http`` and ``https``.
  
'overwritewebroot' => '',
  ownCloud attempts to detect the webroot for generating URLs automatically. 
  For example, if ``www.example.com/owncloud`` is the URL pointing to the 
  ownCloud instance, the webroot is ``/owncloud``. When proxies are in use, 
  it may be difficult for ownCloud to detect this parameter, resulting in 
  invalid URLs.

'overwritecondaddr' => '',
  This option allows you to define a manual override condition as a regular 
  expression for the remote IP address. For example, 
  defining a range of IP addresses starting with ``10.`` and 
  ending with 1 to 3: ``^10\.0\.0\.[1-3]$``

'proxy' => '',
  The URL of your proxy server, for example ``proxy.example.com:8081``.

'proxyuserpwd' => '',
  The optional authentication for the proxy to use to connect to the 
  internet. The format is: ``username:password``.

Deleted Items
-------------
These parameters control the Deleted files app.

'trashbin_retention_obligation' => 30,
  When the delete app is enabled (default), this is the number of days a file 
  will be kept in the trash bin. Default is 30 days.

'trashbin_auto_expire' => true,
  Disable or enable auto-expiration for the trash bin. By default 
  auto-expiration is enabled.

ownCloud Verifications
----------------------
ownCloud performs several verification checks. There are two options, ``true`` 
and ``false``. 

'appcodechecker' => true,
  Check 3rd party apps to make sure they are using the private API and not the 
  public API. If the app uses the public API it cannot be installed.

'updatechecker' => true,
  Check if ownCloud is up-to-date.

'has_internet_connection' => true,
  Is ownCloud connected to the Internet or running in a closed network?
  
'check_for_working_webdav' => true,
  Allows ownCloud to verify a working WebDAV connection. This is done by 
  attempting to make a WebDAV request from PHP.

'check_for_working_htaccess' => true,
  Verifies whether the ``.htaccess`` file may be modified by ownCloud. If set 
  to ``false``, this check will not be performed. If the file cannot be 
  modified, items such as large file uploads cannot be performed. This check 
  only affects Apache servers.
  
Logging
-------  
'log_type' => 'owncloud',
  By default the ownCloud logs are sent to the ``owncloud.log`` file in the 
  default ownCloud data directory. If syslogging is desired, set this parameter 
  to ``syslog``.

'logfile' => ,
  Change the ownCloud logfile name from ``owncloud.log`` to something else.

'loglevel' => '2',
  Valid values are: 0=Debug, 1=Info, 2=Warning, 3=Error. The default value is 
  Warning.

'logdateformat' => 'F d, Y H:i:s',
  This uses PHP.date formatting (see http://php.net/manual/en/function.date.php)
 
'logtimezone' => 
  The default timezone for logfiles is UTC. You may change this; see 
  http://php.net/manual/en/timezones.php

'log_query' => false,
  Append all database queries and parameters to the log file. Use this only for 
  debugging, as your logfile will become huge.

'cron_log' => true,
  Log successful cron runs.

'log_rotate_size' => false,
  Enables log rotation and limits the total size of logfiles. The default is 
  0, or no rotation. Specify a size in bytes, for example 50000000 (50 
  megabytes). A new logfile is created with a new name when the old logfile 
  reaches your limit. The total size of all logfiles is double the 
  ``log_rotate_sizerotation`` value.
  
Alternate Code Locations
------------------------
Some of the ownCloud code may be stored in alternate locations.

'3rdpartyroot' => '',
  ownCloud uses some 3rd party PHP components to provide certain functionality. 
  These components are shipped as part of the software package and reside in 
  ``owncloud/3rdparty``. Use this option to configure a different location.

'3rdpartyurl' => '',
  If you have an alternate ``3rdpartyroot``, you must also configure the URL as 
  seen by a Web browser.

This section is for configuring the download links for ownCloud clients, as 
seen in the first-run wizard and on Personal pages. 

'customclient_desktop' => '', //http://owncloud.org/sync-clients/

'customclient_android' => '', 
//https://play.google.com/store/apps/details?id=com.owncloud.android

'customclient_ios' => '', 
//https://itunes.apple.com/us/app/owncloud/id543672169?mt=8

Apps
----
Options for the Apps folder, Apps store, and App code checker.

'appstoreenabled' => true,
  When enabled, admins may install apps from the ownCloud app store.

'appstoreurl' => 'https://example.com',
  The URL of the appstore to use.

Use the ``apps_paths`` parameter to set the location of the Apps directory, 
which should be scanned for available apps, and where user-specific apps should 
be installed from the Apps store. The ``path`` defines the absolute file system 
path to the app folder. The key ``url`` defines the HTTP web path to that 
folder, starting from the ownCloud web root. The key ``writable`` indicates if a 
user can install apps in that folder.

::

  'apps_paths' => array(
	array(
		'path'=> '/var/www/owncloud/apps',
		'url' => '/apps',
		'writable' => true,
	),
  ),
    
'appcodechecker' => '', 	
  Check 3rd party apps to make sure they are using the private API and not the 
  public API. If the app uses the public API it cannot be installed.
  
Previews
--------
ownCloud supports previews of image files, the covers of MP3 files, and text 
files. These options control enabling and disabling previews, and thumbnail 
size.

'enable_previews' => true,

'preview_max_x' => null,
  The maximum width, in pixels, of a preview. A value of ``null`` means there 
  is no limit.

'preview_max_y' => null,
  The maximum height, in pixels, of a preview. A value of ``null`` means there 
  is no limit.
  
'preview_max_scale_factor' => 10,
  If a lot of small pictures are stored on the ownCloud instance and the preview 
  system generates blurry previews, you might want to consider setting a 
  maximum scale factor. By default, pictures are upscaled to 10 times the 
  original size. A value of ``1`` or ``null`` disables scaling.

'enabledProviewProviders' => 

  
'preview_office_cl_parameters' => '',
  Use this if Libre Office requires additional arguments.
  
Maintenance
-----------
These options are for halting user activity when you are performing server 
maintenance.

'maintenance' => false,
  A value of ``true`` disables ownCloud. Use this when you are performing 
  upgrades. 

'singleuser' => false,
  When set to ``true``, the ownCloud instance will be unavailable for all users 
  who are not in the ``admin`` group.
  
SSL
---

'forcessl' => false,
  Change this to ``true`` to require HTTPS for all connections, and to reject 
  HTTP requests.

'openssl' => array(
	//'config' => '/absolute/location/of/openssl.cnf',
),
  Extra SSL options to be used for configuration.
  
Miscellaneous
-------------   

'blacklisted_files' => array('.htaccess'),
  Use ``.htaccess`` to block users from uploading certain files that you 
  specify.

'share_folder' => '/',
  Define a default folder for shared files and folders other than root.

'theme' => '',
  If you are applying a theme to ownCloud, enter the name of the theme here. 
  The default location for themes is ``owncloud/themes/``.

xframe_restriction' => true,
  XFrame-restriction is a header which prevents browsers from showing the site 
  inside an iframe. This may be used to prevent clickjacking. It is risky 
  to disable this, so leave it set at ``true``.

'cipher' => 'AES-256-CFB',
  The default cipher for encrypting files. Currently AES-128-CFB and 
  AES-256-CFB are supported.

::  
  
 'memcached_servers' => array(
	// hostname, port and optional weight. Also see:
	// http://www.php.net/manual/en/memcached.addservers.php
	// http://www.php.net/manual/en/memcached.addserver.php
	array('localhost', 11211),
	//array('other.host.local', 11211),
 ), 
 
Server details for one or more memcached servers to use for memory caching. 
Memcache is only used if other memory cache options (xcache, apc, apcu) are 
not available.  

'cache_path' => '',
  Location of the cache folder, defaults to ``data/$user/cache`` where 
  ``$user`` is the current user.  When specified, the format will change to 
  ``$cache_path/$user`` where ``$cache_path`` is the configured
  cache directory and ``$user`` is the user.

'quota_include_external_storage' => false,
  EXPERIMENTAL: option whether to include external storage in quota 
  calculation, defaults to false.
  
'filesystem_check_changes' => 1,  
  Specifies how often the filesystem is checked for changes made outside 
  ownCloud. 
  0 -> Never check the filesystem for outside changes, provides a performance 
  increase when it's certain that no changes are made directly to the filesystem
  1 -> Check each file or folder at most once per request, reccomended for 
  general use if outside changes might happen.
  2 -> Check every time the filesystem is used, causes a performance hit when 
  using external storages, not recomended for regular use.
  
'asset-pipeline.enabled' => false,
  All css and js files will be served by the web server statically in one js 
  file and one css file.

'mount_file' => '',
  Where ``mount.json`` file should be stored, defaults to ``data/mount.json``

'filesystem_cache_readonly' => false,
  When ``true``, prevent ownCloud from changing the cache due to changes in the 
  filesystem for all storage.

The example below shows how to configure ownCloud to store all files in a swift 
object storage. It is important to note that ownCloud in object store mode will 
expect exclusive access to the object store container because it only stores the 
binary data for each file. The metadata is currently kept in the local database 
for performance reasons.  WARNING: The current implementation is incompatible 
with any app that uses direct file IO and circumvents our virtual filesystem. 
That includes Encryption and Gallery. Gallery will store thumbnails directly in 
the filesystem  and encryption will cause severe overhead because key files need 
to be fetched in addition to any requested file.  One way to test is applying 
for a trystack account at http://trystack.org/ 

::

 'objectstore' => array(
	'class' => 'OC\\Files\\ObjectStore\\Swift',
	'arguments' => array(
	     // trystack will useyour facebook id as the user name
		'username' => 'facebook100000123456789', 
	     // in the trystack dashboard go to user -> settings -> 
	     // API Password to generate a password	
		'password' => 'Secr3tPaSSWoRdt7', 
	     // must already exist in the objectstore, name can be different	
		'container' => 'owncloud', 
             // create the container if it does not exist. default is false	
		'autocreate' => true, 
	     //required, dev-/trystack defaults to 'RegionOne'	
		'region' => 'RegionOne', 
	     // The Identity/Keystone endpoint 
		'url' => 'http://8.21.28.222:5000/v2.0',
	     // required on dev-/trystack	
		'tenantName' => 'facebook100000123456789', 
             //dev-/trystack uses swift by default, the lib defaults to 
             //'cloudFiles' if omitted		
		'serviceName' => 'swift', 
	),
 ),




/* Custom CSP policy, changing this will overwrite the standard policy */
"custom_csp_policy" => "default-src 'self'; script-src 'self' 'unsafe-eval'; 
style-src 'self' 'unsafe-inline'; frame-src *; img-src *; font-src 'self' 
data:; 
media-src *",

